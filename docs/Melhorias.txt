1. Sistema de Metas Financeiras

Analisando o app "Controlada", implementar um sistema completo de metas financeiras:

CONTEXTO: O card "Meta do M√™s" (linha 99-103 index.html) atualmente apenas mostra sobra dispon√≠vel via fun√ß√£o atualizarEstatisticasHero() no main.js.

IMPLEMENTAR:
1. Nova se√ß√£o na aba Configura√ß√µes para definir metas por categoria
2. Modificar fun√ß√£o atualizarEstatisticasHero() para calcular progresso das metas
3. Adicionar indicadores visuais de progresso no card existente
4. Criar alertas quando metas ultrapassarem 80% e 100%
5. Persistir dados no localStorage como 'metas_usuario'

ARQUIVOS A MODIFICAR:
- index.html: adicionar formul√°rio de metas na section configura√ß√µes
- main.js: fun√ß√µes getMetas(), setMetas(), calcularProgressoMetas()
- style.css: estilos para barras de progresso e alertas

INTEGRA√á√ïES NECESS√ÅRIAS:
- Conectar com sistema de categorias existente (getTodasCategorias())
- Usar formatarReal() para valores monet√°rios
- Integrar com getTotalGastosMes() para c√°lculos

2. Dashboard de Estat√≠sticas Avan√ßadas

Expandir estat√≠sticas do app "Controlada" criando dashboard avan√ßado:

CONTEXTO: Hero sections j√° existem em tab-form e tab-historico com cards b√°sicos de estat√≠sticas.

IMPLEMENTAR:
1. Nova aba "üìà Dashboard" nas tabs principais (linha 72-76 index.html)
2. Expandir fun√ß√µes existentes:
   - getGastosHoje() -> adicionar getTendenciaGastos()
   - getTotalGastosMes() -> adicionar getComparativoMesAnterior()
   - Criar getDistribuicaoMetodosPagamento()

NOVOS COMPONENTES:
- Cards de insights: maior gasto, categoria dominante, proje√ß√£o mensal
- Mini-gr√°ficos usando Chart.js (j√° importado)
- Timeline dos √∫ltimos 5 gastos importantes (>m√©dia)

REUTILIZAR:
- Estrutura .hero-stats existente
- Fun√ß√µes formatarReal(), getCurrentCycleKeyStr()
- Paleta de cores do :root CSS

3. Sistema de Gastos Recorrentes

Implementar gastos recorrentes no app "Controlada":

CONTEXTO: Sistema atual suporta parcelas (linha 160-163) mas n√£o recorr√™ncia autom√°tica.

MODIFICAR FORMUL√ÅRIO EXISTENTE:
- Adicionar checkbox "Gasto recorrente" no form-gasto
- Campo frequ√™ncia: mensal/semanal/anual
- Modificar evento submit do formGasto (linha ~550 main.js)

NOVA ESTRUTURA DE DADOS:
localStorage 'gastos_recorrentes' = [{
  id, descricao, valor, categoria, metodo, frequencia,
  proximaData, ativo, criadoEm
}]

IMPLEMENTAR:
1. Fun√ß√£o verificarGastosRecorrentes() executada no DOMContentLoaded
2. Notifica√ß√£o visual na navbar quando h√° recorrentes pendentes
3. Auto-lan√ßamento com confirma√ß√£o do usu√°rio
4. Se√ß√£o "Gastos Recorrentes" na aba Configura√ß√µes para gerenciar

INTEGRAR COM:
- Fun√ß√µes existentes de salvar gastos
- Sistema de categorias atual
- Seletor de m√™s/ano para lan√ßamentos futuros

4. Modo Escuro/Temas

Implementar sistema de temas baseado nas vari√°veis CSS existentes:

CONTEXTO: Paleta atual definida em :root (style.css) com tons de verde.

CRIAR VARIA√á√ïES:
- Modo escuro: invers√£o das cores atuais mantendo hierarquia
- Temas alternativos: azul, roxo, laranja

IMPLEMENTAR:
1. Toggle na navbar ao lado do filtro de m√™s
2. Fun√ß√£o switchTheme() que altera propriedades CSS
3. Persist√™ncia em localStorage 'tema_preferido'
4. Transi√ß√µes CSS suaves (transition: all 0.3s)

MODIFICAR:
- Adicionar data-theme="dark" no body
- CSS alternativo para cada tema
- Ajustar cores dos gr√°ficos Chart.js por tema

MANTER:
- Estrutura HTML atual
- Funcionalidades existentes
- Responsividade

5. Responsividade Mobile

Otimizar experi√™ncia mobile mantendo estrutura atual:

CONTEXTO: Layout atual usa .sidebar-col + .main-content com CSS Grid/Flexbox.

IMPLEMENTAR:
1. Menu hamb√∫rguer que oculta/mostra sidebar em mobile
2. Bottom navigation para tabs principais em telas pequenas
3. Gestos swipe para navega√ß√£o entre abas

MODIFICAR CSS:
- Media queries existentes em @media (max-width: 768px)
- Transform sidebar para slide-in/out
- Stack vertical dos hero-stats em mobile

JAVASCRIPT:
- Touch events para gestos
- Detectar orienta√ß√£o da tela
- Otimizar modais para mobile (fullscreen em telas pequenas)

MANTER:
- Funcionalidades desktop completas
- Estrutura de dados
- Performance